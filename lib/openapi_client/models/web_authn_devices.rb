=begin
#Passage Management API

#Passage's management API to manage your Passage apps and users.

The version of the OpenAPI document: 1
Contact: support@passage.id
Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class WebAuthnDevices
    # The first time this webAuthn device was used to authenticate the user
    attr_accessor :created_at

    # The CredID for this webAuthn device
    attr_accessor :cred_id

    # The friendly name for the webAuthn device used to authenticate
    attr_accessor :friendly_name

    # The ID of the webAuthn device used for authentication
    attr_accessor :id

    # The last time this webAuthn device was used to authenticate the user
    attr_accessor :last_login_at

    attr_accessor :type

    # The last time this webAuthn device was updated
    attr_accessor :updated_at

    # How many times this webAuthn device has been used to authenticate the user
    attr_accessor :usage_count

    attr_accessor :icons

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_at' => :'created_at',
        :'cred_id' => :'cred_id',
        :'friendly_name' => :'friendly_name',
        :'id' => :'id',
        :'last_login_at' => :'last_login_at',
        :'type' => :'type',
        :'updated_at' => :'updated_at',
        :'usage_count' => :'usage_count',
        :'icons' => :'icons'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'cred_id' => :'String',
        :'friendly_name' => :'String',
        :'id' => :'String',
        :'last_login_at' => :'Time',
        :'type' => :'WebAuthnType',
        :'updated_at' => :'Time',
        :'usage_count' => :'Integer',
        :'icons' => :'WebAuthnIcons'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebAuthnDevices` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebAuthnDevices`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'cred_id')
        self.cred_id = attributes[:'cred_id']
      else
        self.cred_id = nil
      end

      if attributes.key?(:'friendly_name')
        self.friendly_name = attributes[:'friendly_name']
      else
        self.friendly_name = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'last_login_at')
        self.last_login_at = attributes[:'last_login_at']
      else
        self.last_login_at = nil
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'usage_count')
        self.usage_count = attributes[:'usage_count']
      else
        self.usage_count = nil
      end

      if attributes.key?(:'icons')
        self.icons = attributes[:'icons']
      else
        self.icons = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @cred_id.nil?
        invalid_properties.push('invalid value for "cred_id", cred_id cannot be nil.')
      end

      if @friendly_name.nil?
        invalid_properties.push('invalid value for "friendly_name", friendly_name cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @last_login_at.nil?
        invalid_properties.push('invalid value for "last_login_at", last_login_at cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @usage_count.nil?
        invalid_properties.push('invalid value for "usage_count", usage_count cannot be nil.')
      end

      if @icons.nil?
        invalid_properties.push('invalid value for "icons", icons cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @created_at.nil?
      return false if @cred_id.nil?
      return false if @friendly_name.nil?
      return false if @id.nil?
      return false if @last_login_at.nil?
      return false if @type.nil?
      return false if @updated_at.nil?
      return false if @usage_count.nil?
      return false if @icons.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] cred_id Value to be assigned
    def cred_id=(cred_id)
      if cred_id.nil?
        fail ArgumentError, 'cred_id cannot be nil'
      end

      @cred_id = cred_id
    end

    # Custom attribute writer method with validation
    # @param [Object] friendly_name Value to be assigned
    def friendly_name=(friendly_name)
      if friendly_name.nil?
        fail ArgumentError, 'friendly_name cannot be nil'
      end

      @friendly_name = friendly_name
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] last_login_at Value to be assigned
    def last_login_at=(last_login_at)
      if last_login_at.nil?
        fail ArgumentError, 'last_login_at cannot be nil'
      end

      @last_login_at = last_login_at
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if type.nil?
        fail ArgumentError, 'type cannot be nil'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Custom attribute writer method with validation
    # @param [Object] usage_count Value to be assigned
    def usage_count=(usage_count)
      if usage_count.nil?
        fail ArgumentError, 'usage_count cannot be nil'
      end

      @usage_count = usage_count
    end

    # Custom attribute writer method with validation
    # @param [Object] icons Value to be assigned
    def icons=(icons)
      if icons.nil?
        fail ArgumentError, 'icons cannot be nil'
      end

      @icons = icons
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          cred_id == o.cred_id &&
          friendly_name == o.friendly_name &&
          id == o.id &&
          last_login_at == o.last_login_at &&
          type == o.type &&
          updated_at == o.updated_at &&
          usage_count == o.usage_count &&
          icons == o.icons
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created_at, cred_id, friendly_name, id, last_login_at, type, updated_at, usage_count, icons].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
